version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: disaster-response-backend
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - FRONTEND_URL=http://localhost:3000
      # Add your environment variables here or use .env file
      # - SUPABASE_URL=${SUPABASE_URL}
      # - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      # - GEMINI_API_KEY=${GEMINI_API_KEY}
      # - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - disaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: disaster-response-frontend
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api
      - REACT_APP_WS_URL=http://localhost:5000
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - disaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache (Optional - for session storage and caching)
  redis:
    image: redis:7-alpine
    container_name: disaster-response-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - disaster-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  disaster-network:
    driver: bridge

volumes:
  redis-data:
    driver: local 